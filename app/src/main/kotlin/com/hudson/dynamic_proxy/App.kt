/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.hudson.dynamic_proxy

import com.hudson.dynamic_proxy.handler.InvocationHandler
import com.hudson.dynamic_proxy.real.ApiService
import com.hudson.dynamic_proxy.real.RealApiService
import com.hudson.dynamic_proxy.real.TestService
import java.lang.reflect.Method

class App {

    val greeting: String
        get() {
            return "Hello World!"
        }

}

fun main() {
    val realSubject = RealApiService()
    val handler = object : InvocationHandler {
        override fun invoke(method: Method, vararg args: Any?): Any? {
            if(method.name == "getBanner"){
                // 对真实类的结果进一步处理
                val sourceResult = method.invoke(realSubject) as List<String>
                return mutableListOf("hello", "world").apply {
                    addAll(sourceResult)
                }
            }
            if(method.name == "withParam" && args[0] is String){
                // 不考虑真实类的处理逻辑，直接使用自定义逻辑
                return "${args[0]}hudson"
            }
            return null
        }
    }
    val proxyInstance = Proxy.newProxyInstance(RealApiService::class.java, handler) as ApiService


    println("无参方法-代理结果：${proxyInstance.getBanner()}")
    println("有参方法-代理结果：${proxyInstance.withParam("Greet from: ")}")

    val testServiceInstance = Proxy.newProxyInstance(TestService::class.java, object: InvocationHandler{
        override fun invoke(method: Method, vararg args: Any?): Any? {
            if(method.name == "printContent" && args.size == 1){
                println("直接代理接口-代理结果：${args[0]}")
            }
            return null
        }
    }) as TestService

    testServiceInstance.printContent("JavaPoet")
}


